{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatios","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridlines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd7b9b50.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./InfoBox.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox-selected\"} ${isRed && \"infoBox-red\"}`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">{title}</Typography>\r\n\r\n                <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases-green\"}`}>{cases}</h2>\r\n\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">{total} Total</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 400,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      multiplier: 600,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType='cases') => \r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className=\"info-flag\"\r\n                        style={{backgroundImage: `url(${country.countryInfo.flag})`}}\r\n                    />\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ));","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country, cases }) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport \"./LineGraph.css\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatios: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridlines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\nfunction LineGraph({ casesType }, props ) {\r\n    const [data, setData] = useState({});\r\n\r\n    const buildChartData = (data, casesType) => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n\r\n        for (let date in data.cases) {\r\n            if (lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint,\r\n                };\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                });\r\n        };\r\n        \r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className=\"lineGraph_graph\">\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    options = {options}\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useEffect, useState } from \"react\";\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport './App.css';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch (\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2\n        }));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url =\n      countryCode === 'worldwide'\n        ? 'https://disease.sh/v3/covid-19/all'\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      countryCode === \"worldwide\"\n        ? setMapCenter([34.80746, -40.4796])\n        : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      countryCode === \"worldwide\"\n        ? setMapZoom(3)\n        : setMapZoom(4);\n    })\n  }\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"app_left\">\n\n        <div className=\"app_header\">\n          <h1>covid.live</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map(country => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app_stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={e => setCasesType(\"cases\")}\n            title=\"Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={e => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={e => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n\n      </div>\n      \n      <Card className=\"app_right\">\n\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n\n          <h3 className=\"app_graph-title\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app_graph\" casesType={casesType}/>\n\n        </CardContent>\n\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}